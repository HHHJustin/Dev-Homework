package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"runtime/trace"
	"sync"
	"time"
)

type (
	Bean       int
	GroundBean int
	Water      int
	HotWater   int
	Coffee     int
)

const (
	GramBeans          Bean       = 1
	GramGroundBeans    GroundBean = 1
	MilliLiterWater    Water      = 1
	MilliLiterHotWater HotWater   = 1
	CupsCoffee         Coffee     = 1
)

func (w Water) String() string {
	return fmt.Sprintf("%d[ml] water", int(w))
}

func (hw HotWater) String() string {
	return fmt.Sprintf("%d[ml] hot water", int(hw))
}

func (b Bean) String() string {
	return fmt.Sprintf("%d[g] beans", int(b))
}

func (gb GroundBean) String() string {
	return fmt.Sprintf("%d[g] ground beans", int(gb))
}

func (cups Coffee) String() string {
	return fmt.Sprintf("%d cup(s) coffee", int(cups))
}

// 沖泡 1 杯咖啡所需的水量
func (cups Coffee) Water() Water {
	return Water(180*cups) / MilliLiterWater
}

// 沖泡 1 杯咖啡所需的熱水量
func (cups Coffee) HotWater() HotWater {
	return HotWater(180*cups) / MilliLiterHotWater
}

// 沖泡 1 杯咖啡所需的咖啡豆量
func (cups Coffee) Beans() Bean {
	return Bean(20*cups) / GramBeans
}

// 沖泡 1 杯咖啡所需咖啡粉量
func (cups Coffee) GroundBeans() GroundBean {
	return GroundBean(20*cups) / GramGroundBeans
}

func main() {
	f, err := os.Create("trace.out")
	if err != nil {
		log.Fatalln("Error:", err)
	}
	defer func() {
		if err := f.Close(); err != nil {
			log.Fatalln("Error:", err)
		}
	}()

	if err := trace.Start(f); err != nil {
		log.Fatalln("Error:", err)
	}
	defer trace.Stop()

	RunMyProgram()
}

func RunMyProgram() {
	// 預計沖泡多少杯咖啡
	const amountCoffee = 20 * CupsCoffee

	ctx, task := trace.NewTask(context.Background(), "make coffee")
	defer task.End()

	// 材料
	water := amountCoffee.Water()
	beans := amountCoffee.Beans()

	fmt.Println(water)
	fmt.Println(beans)

	ch_water := make(chan Water)
	ch_beans := make(chan Bean)

	var hotWater HotWater
	var groundBeans GroundBean
	var wg sync.WaitGroup
	var mu_boil sync.Mutex
	var mu_grind sync.Mutex
	for water > 0 || beans > 0 {
		if water > 0 {
			wg.Add(2)
			water -= 600 * MilliLiterWater
			go func() {
				mu_boil.Lock()
				defer mu_boil.Unlock()
				boil(ctx, 600*MilliLiterWater, ch_water, &wg)
			}()
			go getHotWater(ch_water, &wg, &hotWater)
		}
		if beans > 0 {
			wg.Add(2)
			beans -= 20 * GramBeans
			go func() {
				mu_grind.Lock()
				defer mu_grind.Unlock()
				grind(ctx, 20*GramBeans, ch_beans, &wg)
			}()
			go getGroundBeans(ch_beans, &wg, &groundBeans)
		}
	}

	wg.Wait()
	close(ch_beans)
	close(ch_water)

	fmt.Println(hotWater)
	fmt.Println(groundBeans)

	// 沖泡咖啡
	var coffee Coffee
	cups := 4 * CupsCoffee
	for hotWater >= cups.HotWater() && groundBeans >= cups.GroundBeans() {
		hotWater -= cups.HotWater()
		groundBeans -= cups.GroundBeans()
		coffee += brew(ctx, cups.HotWater(), cups.GroundBeans())
	}

	fmt.Println(coffee)
}

// 燒開水
func boil(ctx context.Context, water Water, ch_water chan<- Water, wg *sync.WaitGroup) {
	defer wg.Done()
	defer trace.StartRegion(ctx, "boil").End()
	time.Sleep(400 * time.Millisecond)
	ch_water <- water
}

func getHotWater(ch_water chan Water, wg *sync.WaitGroup, hotwater *HotWater) {
	defer wg.Done()
	*hotwater += HotWater(<-ch_water)
}

// 研磨
func grind(ctx context.Context, beans Bean, ch_bean chan<- Bean, wg *sync.WaitGroup) {
	defer wg.Done()
	defer trace.StartRegion(ctx, "grind").End()
	time.Sleep(200 * time.Millisecond)
	ch_bean <- beans
}

func getGroundBeans(ch_bean chan Bean, wg *sync.WaitGroup, groundbean *GroundBean) {
	defer wg.Done()
	*groundbean += GroundBean(<-ch_bean)
}

// 沖泡
func brew(ctx context.Context, hotWater HotWater, groundBeans GroundBean) Coffee {
	defer trace.StartRegion(ctx, "brew").End()
	time.Sleep(1 * time.Second)
	// 少量者優先處理
	cups1 := Coffee(hotWater / (1 * CupsCoffee).HotWater())
	cups2 := Coffee(groundBeans / (1 * CupsCoffee).GroundBeans())
	if cups1 < cups2 {
		return cups1
	}
	return cups2
}
